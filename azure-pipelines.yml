# This pipeline uses Terraform to create/update a Self-Hosted Pipeline Agent

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  sshPublicKeyFile: 'id_rsa.pub'

  # Terraform backend variables
  # terraformBackendResourceGroup: # Defined as secret variable
  # terraformBackendStorageAccount: # Defined as secret variable
  terraformBackendContainer: 'pipelineagents'
  terraformBackendBlob: 'terraform.tfstate'

  # Terraform project variables
  TF_VAR_ssh_public_key: 'id_rsa.pub' # Key will be downloaded in terraform directory
  TF_VAR_pipeline_agent_name: 'ubuntu1804-agent'
  TF_VAR_pipeline_agent_pool: 'Ubuntu'
  TF_VAR_pipeline_resource_group: 'PipelineAgents'
  devOpsOrgUrl: 'https://dev.azure.com/$(TF_VAR_devops_org)'


steps:
- task: DownloadSecureFile@1
  displayName: 'Download SSH Public Key'
  inputs:
    secureFile: '$(sshPublicKeyFile)'

- pwsh: |
   foreach ($file in $(Get-ChildItem Env:*SECUREFILEPATH))
   {
       Copy-Item $file.Value '$(terraformDirectory)'
   }
  displayName: 'Copy Secure Files'


# Once 'az pipelines agent' supports management of the agent, take it offline
- task: AzureCLI@2
# displayName: 'Take agent offline'
  displayName: 'Query agent status'
  name: 'agentConfig'
  inputs:
    azureSubscription: '$(subscriptionConnection)'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
     # List environment variables (debug)
     Get-ChildItem -Path Env:AZURE_* | Sort-Object -Property Name

     # Configure az cli for devops
     az extension add --name azure-devops 
     az devops configure --defaults organization='$(devOpsOrgUrl)'

     # Capture some variables
     $agentName = '$(TF_VAR_pipeline_agent_name)'
     $agentPool = '$(TF_VAR_pipeline_agent_pool)'
     Write-Host "Agent pool is '$(TF_VAR_pipeline_agent_pool)'"
     Write-Host "Agent pool is '$agentPool'"

     # Find agent poo
     $agentPoolId = $(az pipelines pool list --query="[?name=='$agentPool'].id | [0]")

     # Show agent details
     az pipelines agent list --agent-name $agentName --pool-id $agentPoolId 

     # Get agent status
     $enabled = $(az pipelines agent list --agent-name $agentName --pool-id $agentPoolId --query="[0].enabled")
     echo "Agent $agentName enabled status is '$enabled'"
     
     Write-Host "##vso[task.setvariable variable=agentEnabled;isOutput=true]$enabled"
    addSpnToEnvironment: true
    useGlobalConfig: true
    failOnStandardError: true
  env:
    # Use Pipeline token to access Azure DevOps
    AZURE_DEVOPS_EXT_PAT: '$(System.AccessToken)'

- task: AzureCLI@2
  displayName: 'Terraforming'
  inputs:
    azureSubscription: '$(subscriptionConnection)'
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
     # Use Pipeline Service Principal and Service Connection to configure Terraform azurerm provider
     $env:ARM_CLIENT_ID=$env:servicePrincipalId
     $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
     $env:ARM_SUBSCRIPTION_ID=$(az account show --query id | tr -d '\"')
     $env:ARM_TENANT_ID=$env:tenantId

     # Fix case of environment variables mangled by Azure Pipeline Agent
     foreach ($tfvar in $(Get-ChildItem Env:TF_VAR_*)) {
         $properCaseName = $tfvar.Name.Substring(0,7) + $tfvar.Name.Substring(7).ToLowerInvariant()
         Invoke-Expression "`$env:$properCaseName = `$env:$($tfvar.Name)"  
     }
     # List environment variables (debug)
     Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,TF_* | Sort-Object -Property Name

     # Terraforming
     terraform init -backend-config=storage_account_name=$(terraformBackendStorageAccount) -backend-config=container_name=$(terraformBackendContainer) -backend-config=key='$(terraformBackendBlob)' -backend-config=resource_group_name=$(terraformBackendResourceGroup)
     terraform plan -var="devops_pat=$(TF_VAR_devops_pat)" -out='agent.plan'
     terraform apply -auto-approve 'agent.plan'
    addSpnToEnvironment: true
    useGlobalConfig: true
    workingDirectory: '$(terraformDirectory)'
    failOnStandardError: true
  env:
    TF_IN_AUTOMATION: 'true' # No prompts
    