// Taken from https://docs.microsoft.com/en-us/azure/firewall/log-analytics-samples
AzureDiagnostics
| where Category == "AzureFirewallApplicationRule" 
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " " TempDetails
| parse TempDetails with "was " Action1 ". Reason: " Rule1
| parse TempDetails with "to " FQDN ":" TargetPortInt:int ". Action: " Action2 "." *
| parse TempDetails with * ". Rule Collection: " RuleCollection2a ". Rule:" Rule2a
| parse TempDetails with * "Deny." RuleCollection2b ". Proceeding with" Rule2b
| extend TargetPort = tostring(TargetPortInt)
| extend Action1 = case(Action1 == "Deny","Deny","Unknown Action")
| extend Action = case(Action2 == "",Action1,Action2),Rule = case(Rule2a == "", case(Rule1 == "",case(Rule2b == "","N/A", Rule2b),Rule1),Rule2a), 
RuleCollection = case(RuleCollection2b == "",case(RuleCollection2a == "","No rule matched",RuleCollection2a), RuleCollection2b),FQDN = case(FQDN == "", "N/A", FQDN),TargetPort = case(TargetPort == "", "N/A", TargetPort)
| parse Rule with * "(config:" ConfigurationString ")"
| extend Configuration = toint(ConfigurationString)
| extend configure_cidr_allow_rules = (binary_or(Configuration,toint(pow(2,0))) == Configuration)
| extend configure_wildcard_allow_rules = (binary_or(Configuration,toint(pow(2,1))) == Configuration)
| extend deploy_bastion = (binary_or(Configuration,toint(pow(2,2))) == Configuration)
| extend deploy_firewall = (binary_or(Configuration,toint(pow(2,3))) == Configuration)
| extend deploy_non_essential_vm_extensions = (binary_or(Configuration,toint(pow(2,4))) == Configuration)
| extend deploy_scale_set = (binary_or(Configuration,toint(pow(2,5))) == Configuration)
| extend deploy_self_hosted_vms = (binary_or(Configuration,toint(pow(2,6))) == Configuration)
| extend deploy_self_hosted_vm_agents = (binary_or(Configuration,toint(pow(2,7))) == Configuration)
| extend prepare_host = (binary_or(Configuration,toint(pow(2,8))) == Configuration)
| project TimeGenerated, SourceIP, FQDN, TargetPort, Action ,RuleCollection, Rule, Configuration, configure_cidr_allow_rules, configure_wildcard_allow_rules, deploy_non_essential_vm_extensions, deploy_self_hosted_vm_agents, prepare_host
| order by TimeGenerated desc
| where Action == "Allow"