# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace prefix
  type: string
  default: cd
  values:
  - cd
  - cd2
  - cd3
  - cd3
  - depgrp
  - env
  - test
  - test1
  - test2
  - test3
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: deploy
  displayName: Deploy Agent Infrastructure
  type: boolean
  default: true
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: 'If no prior resources exist'
  values:
  - Always
  - 'If no prior resources exist'
  - Never 
  - 'On failure'
  - 'On success'
- name: retryCount
  displayName: Terraform task retry count
  type: number
  default: 1

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

variables:
- group: 'pipeline-agents-common'
- group: 'pipeline-agents-cd-${{ parameters.workspace }}'
- name: 'resourceGroup' 
  value: 'azure-pipelines-agents-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'
- name: 'substituteAlternateVariables'
  value: 'false'
- name: 'terraformArtifactPrefix'
  value: 'terraform'
- name: 'TF_VAR_resource_suffix'
  value: '$(Build.BuildId)'
- name: 'TF_WORKSPACE'
  value: '${{ parameters.workspace }}'
- name: 'unpinTerraformProviders'
  value: 'false'
- template: azure-pipeline-agents-ci-variables.yml

jobs:
- job: provision
  ${{ if parameters.deploy }}:
    displayName: 'Provision, Deploy'
  ${{ else }}:
    displayName: 'Provision'
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  workspace:
    clean: all

  steps:
  - template: azure-pipeline-agents-ci-deploy-steps.yml
    parameters:
      clear: ${{ parameters.clear }}
      deploy: ${{ parameters.deploy }}
      destroy: ${{ parameters.destroy }}
      retryCount: ${{ parameters.retryCount }}
      testReentrance: false
      unpinTerraform: false
      unpinTerraformProviders: false
  # - pwsh: |
  #     Write-Host "Strategy1:"
  #     Write-Host "${env:STRATEGY}"
  #     Write-Host "Strategy2:"
  #     Write-Host "$(terraform.azdo_pools_json)"
  #   env:
  #     STRATEGY: $[ variables['terraform.azdo_pools_json'] ]
  # - template: azure-pipeline-agents-ci-destroy-steps.yml
  #   parameters:
  #     destroy: ${{ parameters.destroy }}
  #     retryCount: ${{ parameters.retryCount }}


# - job: testOutput
#   condition: succeeded()
#   dependsOn: provision
#   displayName: 'Debug strategy'
#   timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

#   variables:
#     foo: $[ dependencies.provision.outputs['terraform.foo'] ]
#     strategy: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]

#   pool:
#     name: 'Azure Pipelines'

#   steps:
#   - pwsh: |
#       Write-Host "Strategy:`n${env:STRATEGY}"
#       Write-Host "foo: `"${env:FOO}`""
#     # env:
#       # STRATEGY: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]
#       # FOO: $[ dependencies.provision.outputs['terraform.foo'] ]


- job: test
  condition: succeeded()
  dependsOn: 
    - provision
    # - testOutput
  displayName: 'Test pool'

  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]
  variables:
    strategy: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]

  pool:
    name: '$(pool)'
    demands:
    - agent.os -equals $(os)

  strategy:
    # matrix: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]
    matrix: $[ variables['strategy'] ]

  steps:
  - pwsh: |
      Write-Host "Hello Agent"
      Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
    name: provisioningResult
    displayName: 'Indicate deployment success'
    condition: succeeded()

- ${{ if ne(parameters.destroy, 'Never') }}:
  - job: destroy
    dependsOn: 
      - provision
      - test
    ${{ if ne(variables['Build.Reason'],'Manual') }}:
      displayName: 'Destroy infrastructure (always on pr/schedule)'
      condition: succeededOrFailed()
    ${{ elseif eq(parameters.destroy, 'Always') }}:
      displayName: 'Destroy infrastructure'
      condition: succeededOrFailed()
    ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
      displayName: 'Destroy infrastructure (${{ lower(parameters.destroy) }})'
      condition: and(succeeded(),eq(dependencies.provision.outputs['apply.priorResourcesExist'],'false'))
    ${{ elseif eq(parameters.destroy, 'On failure') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      condition: failed()
    ${{ elseif eq(parameters.destroy, 'On success') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      condition: succeeded()
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    pool:
      name: '$(pool)'
      vmImage: $(vmImage)

    variables:
      terraformVersion: $[ coalesce(dependencies.provision.outputs['terraformConfig.version'],'latest') ]

    steps:
    - checkout: self
      submodules: true

    - task: DownloadPipelineArtifact@2
      displayName: 'Download initialized Terraform directory'
      inputs:
        artifact: $(terraformArtifactName)
        path: $(terraformDirectory)

    - bash: |
        echo Marking Terraform provider binaries as executable...
        find . | xargs chmod +x
      displayName: 'Make Terraform providers executable'
      workingDirectory: $(terraformDirectory)/.terraform/providers

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download initialized SSH directory'
      inputs:
        artifact: $(sshArtifactName)
        path: $(sshDirectory)

    - template: azure-pipeline-agents-ci-destroy-steps.yml
      parameters:
        destroy: Always # Overridden by job-level condition
        retryCount: ${{ parameters.retryCount }}