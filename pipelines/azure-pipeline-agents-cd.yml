# This pipeline is for CI/CD
parameters:
- name: workspace
  displayName: Pipeline Environment / Terraform Workspace prefix
  type: string
  default: cd
  values:
  - cd
  - cd2
  - cd3
  - cd3
  - depgrp
  - env
  - test
  - test1
  - test2
  - test3
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: deploy
  displayName: Deploy Agent Infrastructure
  type: boolean
  default: true
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: 'If no prior resources exist'
  values:
  - Always
  - 'If no prior resources exist'
  - Never 
  - 'On failure'
  - 'On success'
- name: retryCount
  displayName: Terraform task retry count
  type: number
  default: 1

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.workspace }}-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

variables:
- group: 'pipeline-agents-common'
- group: 'pipeline-agents-cd-${{ parameters.workspace }}'
- name: 'resourceGroup' 
  value: 'azure-pipelines-agents-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'
- name: 'substituteAlternateVariables'
  value: 'false'
- name: 'terraformArtifactPrefix'
  value: 'terraform'
- name: 'TF_VAR_resource_suffix'
  value: '$(Build.BuildId)'
- name: 'TF_WORKSPACE'
  value: '${{ parameters.workspace }}'
- name: 'unpinTerraformProviders'
  value: 'false'
- template: azure-pipeline-agents-ci-variables.yml

jobs:
- job: 'provision'
  ${{ if and(eq(parameters.destroy, 'Always'),parameters.deploy) }}:
    displayName: 'Provision, Deploy, Test & Destroy'
  ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
    displayName: 'Provision, Deploy, Test & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'Never'),parameters.deploy) }}:
    displayName: 'Provision, Deploy & Test'
  ${{ if and(eq(parameters.destroy, 'On failure'),parameters.deploy) }}:
    displayName: 'Provision, Deploy, Test & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'On success'),parameters.deploy) }}:
    displayName: 'Provision, Deploy, Test & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'Always'),not(parameters.deploy)) }}:
    displayName: 'Provision & Destroy'
  ${{ if and(eq(parameters.destroy, 'If no prior resources exist'),not(parameters.deploy)) }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'Never'),not(parameters.deploy)) }}:
    displayName: 'Provision'
  ${{ if and(eq(parameters.destroy, 'On failure'),not(parameters.deploy)) }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  ${{ if and(eq(parameters.destroy, 'On success'),not(parameters.deploy)) }}:
    displayName: 'Provision & Destroy (${{ lower(parameters.destroy) }})'
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    vmImage: $(vmImage)

  workspace:
    clean: all

  steps:
  - template: azure-pipeline-agents-ci-steps.yml
    parameters:
      clear: ${{ parameters.clear }}
      deploy: ${{ parameters.deploy }}
      destroy: ${{ parameters.destroy }}
      retryCount: ${{ parameters.retryCount }}
      testReentrance: false
      unpinTerraform: false
      unpinTerraformProviders: false
  - pwsh: |
      Write-Host "Strategy:"
      Write-Host $env:STRATEGY
    env:
      STRATEGY: $[ variables['terraform.azdo_pools_json'] ]

- job: 'testOutput'
  condition: succeeded()
  dependsOn: 'provision'
  displayName: 'Debug strategy'
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: 'Azure Pipelines'

  steps:
  - pwsh: |
      Write-Host "Strategy:"
      Write-Host $env:STRATEGY
    env:
      STRATEGY: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]


- job: 'test'
  condition: succeeded()
  dependsOn: 
    - 'provision'
    - 'testOutput'
  displayName: 'Test pool $(pool)'
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    name: '$(pool)'
    demands:
    - agent.os -equals $(os)

  strategy:
    matrix: $[ dependencies.provision.outputs['terraform.azdo_pools_json'] ]

  steps:
  - pwsh: |
      Write-Host "Hoi"