# This pipeline is for CI/CD
parameters:
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - 'If no prior resources exist'
  - Never 
  - 'On failure'
  - 'On success'
- name: retryCount
  displayName: Terraform task retry count
  type: number
  default: 1

steps:
  - ${{ if not(eq(parameters.destroy, 'Never')) }}:
    - task: AzureCLI@2
      displayName: 'Terraform destroy (${{ lower(parameters.destroy) }})'
      ${{ if eq(parameters.destroy, 'Always') }}:
        condition: succeededOrFailed()
      ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
        condition: eq(variables['apply.priorResourcesExist'],'false')
      ${{ elseif eq(parameters.destroy, 'On failure') }}:
        condition: failed()
      ${{ elseif eq(parameters.destroy, 'On success') }}:
        condition: succeeded()
      continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
      retryCountOnTaskFailure: ${{ parameters.retryCount }}
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1
          ./deploy.ps1 -destroy -force
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

  - ${{ if ne(parameters.destroy, 'Never') }}:
    - task: AzureCLI@2
      name: teardownAzure
      displayName: 'Tear down remaining Azure resources'
      ${{ if eq(parameters.destroy, 'Always') }}:
        condition: or(always(),canceled())
      ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
        condition: eq(variables['apply.priorResourcesExist'],'false')
      ${{ elseif eq(parameters.destroy, 'On failure') }}:
        condition: ne(variables['provisioningResult.result'],'success')
      ${{ elseif eq(parameters.destroy, 'On success') }}:
        condition: eq(variables['provisioningResult.result'],'success')
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
          # Build JMESPath expression
          $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '$(TF_WORKSPACE)' && tags.owner == '$(TF_VAR_application_owner)' && properties.provisioningState != 'Deleting'].id"
          Write-Host "Removing resources identified by `"$tagQuery`"..."

          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }

          # Remove (remaining) resources
          $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
          if ($resourceIDs) {
            Write-Host "Removing resources `"${resourceIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }

          # Remove policy definition
          if (($env:TF_VAR_configure_access_control ?? 'true') -ieq 'true') {
            ./delete_policy.ps1 -Workspace $(TF_WORKSPACE) -Suffix "$(TF_VAR_resource_suffix)"
          }
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

  - ${{ if ne(parameters.destroy, 'Never') }}:
    - task: AzureCLI@2
      name: teardownAzDO
      displayName: 'Tear down remaining Azure DevOps resources'
      ${{ if eq(parameters.destroy, 'Always') }}:
        condition: or(always(),canceled())
      ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
        condition: eq(variables['apply.priorResourcesExist'],'false')
      ${{ elseif eq(parameters.destroy, 'On failure') }}:
        condition: not(eq(variables['provisioningResult.result'],'success'))
      ${{ elseif eq(parameters.destroy, 'On success') }}:
        condition: eq(variables['provisioningResult.result'],'success')
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue"
          ./delete_agent_pool.ps1 "${env:LINUX_SCALE_SET_POOL_NAME}"
          ./delete_agent_pool.ps1 "${env:WINDOWS_SCALE_SET_POOL_NAME}"
          if (!${env:TF_VAR_azdo_self_hosted_pool_name}) {
            ./delete_agent_pool.ps1 "${env:SELF_HOSTED_POOL_NAME}"
          } 
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'
      env:
        TF_VAR_azdo_self_hosted_pool_name: '$(TF_VAR_azdo_self_hosted_pool_name)'


  - ${{ if ne(parameters.destroy, 'Never') }}:
    - task: AzureCLI@2
      name: cleanup
      displayName: 'Clean up Terraform state'
      ${{ if eq(parameters.destroy, 'Always') }}:
        condition: or(always(),canceled())
      ${{ elseif eq(parameters.destroy, 'If no prior resources exist') }}:
        condition: eq(variables['apply.priorResourcesExist'],'false')
      ${{ elseif eq(parameters.destroy, 'On failure') }}:
        condition: not(eq(variables['provisioningResult.result'],'success'))
      ${{ elseif eq(parameters.destroy, 'On success') }}:
        condition: eq(variables['provisioningResult.result'],'success')
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1

          $terraformState = (terraform state pull | ConvertFrom-Json)
          if ($terraformState.resources) {
            Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
            $terraformState.check_results = $null
            $terraformState.outputs = New-Object PSObject # Empty output
            $terraformState.resources = @() # No resources
            $terraformState.serial++
            $terraformState | ConvertTo-Json | terraform state push -
          } else {
            Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
          }
          terraform state pull 
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(terraformDirectory)'