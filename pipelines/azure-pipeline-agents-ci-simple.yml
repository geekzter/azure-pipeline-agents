# This pipeline is for CI/CD
name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-$(Build.BuildId)

trigger: none

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 0 * * Tue,Fr'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - master

variables:
- group: 'pipeline-agents-ci-simple'

jobs:
- job: 'Provision'
  displayName: 'Provision & Destroy (simple)'
  timeoutInMinutes: 120

  pool:
    name: 'Azure Pipelines'
    vmImage: ubuntu-latest

  variables:
    ARM_USE_CLI: true
    AZURE_CORE_ONLY_SHOW_ERRORS: true
    AZURE_EXTENSION_USE_DYNAMIC_INSTALL: yes_without_prompt
    repository: azure-pipeline-agents
    resourceGroup: pipelines-agents-$(TF_WORKSPACE)-$(Build.BuildId)
    scriptDirectory: $(Build.SourcesDirectory)/scripts
    terraformDirectory: $(Build.SourcesDirectory)/terraform
    TF_IN_AUTOMATION: true
    TF_INPUT: 0
    TF_VAR_resource_suffix: $(Build.BuildId)
    TF_VAR_run_id: $(Build.BuildId)
    TF_WORKSPACE: cis

  steps:
  - checkout: self
    submodules: true

  - bash: |
      ssh-keygen -q -m PEM -N '' -f ~/.ssh/id_rsa
    displayName: 'Generate SSH Key Pair'

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  - pwsh: terraform init
    displayName: 'Terraform init'
    workingDirectory: '$(terraformDirectory)'

  - task: AzureCLI@2
    displayName: 'Terraform plan & apply'
    name: apply
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_OIDC_TOKEN        = $env:idToken
        ./deploy.ps1 -apply -force
      failOnStandardError: true
      workingDirectory: '$(scriptDirectory)'
    env: # Maintain casing of Terraform variable names
      TF_VAR_application_name: $(TF_VAR_application_name)
      TF_VAR_application_owner: $(TF_VAR_application_owner)
      TF_VAR_azdo_org_url: $(System.CollectionUri)
      TF_VAR_resource_prefix: $(TF_VAR_resource_prefix)
      TF_VAR_resource_suffix: $(TF_VAR_resource_suffix)
      TF_VAR_tags: $(TF_VAR_tags)
      TF_VAR_run_id: $(TF_VAR_run_id)

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=result;isOutput=true]success"
    name: provisioningResult
    displayName: 'Indicate provisioning success'
    condition: succeeded()

  - task: AzureCLI@2
    displayName: 'Terraform destroy'
    condition: succeededOrFailed()
    continueOnError: true # Treat failure as warning during destroy, we will clean up anyway
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_OIDC_TOKEN        = $env:idToken
        ./deploy.ps1 -destroy -force
      failOnStandardError: true
      workingDirectory: '$(scriptDirectory)'
    env: # Maintain casing of Terraform variable names
      TF_VAR_application_name: $(TF_VAR_application_name)
      TF_VAR_application_owner: $(TF_VAR_application_owner)
      TF_VAR_azdo_org_url: $(System.CollectionUri)
      TF_VAR_resource_prefix: $(TF_VAR_resource_prefix)
      TF_VAR_resource_suffix: $(TF_VAR_resource_suffix)
      TF_VAR_tags: $(TF_VAR_tags)
      TF_VAR_run_id: $(TF_VAR_run_id)

  - task: AzureCLI@2
    name: teardown
    displayName: 'Tear down remaining resources'
    condition: or(always(),canceled())
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
        # Build JMESPath expression
        $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '$(TF_WORKSPACE)' && tags.runid == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
        Write-Host "Removing resources identified by `"$tagQuery`"..."

        # Remove resource groups
        $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
        if ($resourceGroupIDs) {
          Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
          &{ # az writes information to stderr
            $ErrorActionPreference = 'SilentlyContinue'
            az resource delete --ids $resourceGroupIDs 2>&1
          }
        } else {
          Write-Host "No resource groups to remove"
        }

        # Remove (remaining) resources
        $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
        if ($resourceIDs) {
          Write-Host "Removing resources `"${resourceIDs}`"..."
          &{ # az writes information to stderr
            $ErrorActionPreference = 'SilentlyContinue'
            az resource delete --ids $resourceIDs 2>&1
          }
        } else {
          Write-Host "No resources to remove"
        }

        # Remove policy definition
        ./delete_policy.ps1 -Workspace $(TF_WORKSPACE) -Suffix $(Build.BuildId)
      failOnStandardError: true
      workingDirectory: '$(scriptDirectory)'

  - task: AzureResourceGroupDeployment@2
    displayName: 'Delete $(resourceGroup)'
    condition: or(failed(),canceled()) # Try this if the previous approach failed
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      action: 'deleteRG'
      resourceGroupName: '$(resourceGroup)'

  - task: AzureCLI@2
    name: cleanup
    displayName: 'Clean up Terraform state'
    condition: or(always(),canceled())
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $terraformState = (terraform state pull | ConvertFrom-Json)
        if ($terraformState.resources) {
          Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
          $terraformState.outputs = New-Object PSObject # Empty output
          $terraformState.resources = @() # No resources
          $terraformState.serial++
          $terraformState | ConvertTo-Json | terraform state push -
        } else {
          Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
        }
        terraform state pull 
      failOnStandardError: true
      workingDirectory: '$(terraformDirectory)'