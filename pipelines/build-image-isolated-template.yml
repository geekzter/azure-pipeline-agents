parameters:
- name: image
  displayName: Image
  type: string
  values:
  - Ubuntu1804
  - Ubuntu2004
  - Windows2019
  - Windows2022
- name: imageReleaseName
# Image Release Name as defined in GitHUb release feed
# https://api.github.com/repos/actions/virtual-environments/releases
  displayName: Image Release Name
  type: string
- name: imageResourcePrefix
  displayName: Image Resource Prefix
  type: string
- name: destroy
  displayName: Destroy Infrastructure
  type: boolean
  default: true
- name: retryCount
  displayName: Build task retry count
  type: number
  default: 1
- name: waitForReplication
  displayName: Wait for image replication to finish
  type: boolean
  default: true

jobs:
- job: '${{ parameters.image }}'
  displayName: 'Build & publish ${{ parameters.image }}'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  timeoutInMinutes: 1430

  variables:
  - name: 'agentRepository'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents'
  - name: AZURE_CORE_ONLY_SHOW_ERRORS
    value: 'true'
  - name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
    value: 'yes_without_prompt'
  - name: 'imageName'
    value: '${{ parameters.image }}'
  - ${{ if contains(parameters.image,'buntu') }}:
    - name: 'imageOffer'
      value: 'Ubuntu'
    - name: 'imageOSType'
      value: 'linux'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Ubuntu', '') }}
    - name: 'imageSubDirectory'
      value: 'linux'
  - ${{ else }}:
    - name: 'imageOffer'
      value: 'Windows'
    - name: 'imageOSType'
      value: 'windows'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Windows', '') }}
    - name: 'imageSubDirectory'
      value: 'win'
  - name: 'imagePublisher'
    value: 'PrivatePipelineImages'
  - name: 'imageRepository'
    value: '$(Build.SourcesDirectory)/virtual-environments'
  - name: 'imageReleaseName' 
    value: '${{ parameters.imageReleaseName }}'
  - name: 'imageResourcePrefix' 
    value: '${{ parameters.imageResourcePrefix }}'
  - name: 'imageTemplate'
    value: '$(Build.SourcesDirectory)/virtual-environments/images/$(imageSubDirectory)/${{ lower(parameters.image) }}.json'
  - name: 'retryCount' 
    value: ${{ parameters.retryCount }}

  steps:
  - checkout: self
  - checkout: virtual-environments

  - pwsh: |
      $vmMetadata = (Invoke-RestMethod -Headers @{"Metadata"="true"} -Method GET -NoProxy -Uri "http://169.254.169.254/metadata/instance/compute?api-version=2021-02-01" -TimeoutSec 1)
      $vmMetadata | Add-Member -NotePropertyName hostName -NotePropertyValue $([System.Net.Dns]::GetHostName())
      $vmMetadata | Format-List

      # List environment variables
      Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name

      Write-Host "##vso[task.setvariable variable=location;isoutput=true]$($vmMetadata.location)"
    name: agent
    displayName: 'Retrieve agent information'

  - task: AzureCLI@2
    name: githubRelease
    displayName: 'Get release for $(imageName)'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        (Invoke-RestMethod -Uri https://api.github.com/repos/actions/virtual-environments/releases) | Where-Object {$_.tag_name -match "$(imageReleaseName)" -and !$_.draft -and !$_.prerelease} `
                                                                                                    | Select-Object -First 1 `
                                                                                                    | Set-Variable release
        Write-Host "`nLatest version ($version) of $(imageName) at https://github.com/actions/virtual-environments/releases:"
        $release | Format-List

        $releaseVersion = $release.tag_name.Split("/")[1]
        $version = [version]"${releaseVersion}.0.0"
        $twoPartVersionString = $version.ToString(2)
        $threePartVersionString = $version.ToString(3)

        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?starts_with(name,'${twoPartVersionString}') && (provisioningState=='Creating' || provisioningState=='Succeeded') && !(publishingProfile.excludeFromLatest)]" `
                                  | ConvertFrom-Json | Set-Variable imageVersion

        if ($imageVersion) {
          Write-Host "Image Definition '$(imageName)' with version '$twoPartVersionString' already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}:"
          $imageVersion | Format-List
          Write-Warning "Build & publish of '$releaseVersion' will be skipped as it already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]false"
        } else {
          Write-Warning "Image Definition '$(imageName)' with version '$twoPartVersionString' doesn't exist yet in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
          Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$($release.target_commitish)"
          Write-Host "##vso[task.setvariable variable=qualifiedVersion;isoutput=true]$threePartVersionString"
          Write-Host "##vso[task.setvariable variable=version;isoutput=true]$releaseVersion"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]true"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    name: imageBuild
    displayName: 'Build image'
    condition: ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }

        # Checkout source pertaining to release is not recommended
        # https://github.com/actions/virtual-environments/issues/4238#issuecomment-939732274
        # https://github.com/actions/virtual-environments/discussions/4362
        # git checkout $(githubRelease.commit) --quiet
        # We assume main branch is the latest released version

        # Update template to override configuration not accessible as variables
        Get-Content $(imageTemplate) | ConvertFrom-Json -AsHashtable | Set-Variable packerTemplate
        $packerTemplate.builders[0]["azure_tags"] = @{
          application = "Pipeline Agents"
          build = "$(Build.BuildId)"
          commit = "$(git rev-parse HEAD)"
          qualifiedVersion = "$(githubRelease.qualifiedVersion)"
          image = "$(imageName)"
          pipeline = "$(Build.DefinitionName)"
          shutdown = "false"
          versionlabel = "$(githubRelease.version)"
        }
        Write-Host "`nTags that will be applied to build resources:"
        $packerTemplate.builders[0]["azure_tags"] | Format-Table
        Write-Host "`nPacker template:"
        $packerTemplate | ConvertTo-Json -Depth 5
        $packerTemplate | ConvertTo-Json -Depth 5 | Set-Content $(imageTemplate)

        # TODO: Use Managed Identity? Packer does not work with an User Assigned Managed Identity
        # https://www.packer.io/plugins/builders/azure#azure-managed-identity
        # System Assigned Managed Identity is shared amongst all pipelines running onm the same agent
        # A System Assigned Managed Identity will have the superset of all privileges for all pipelines (opposite of 'least privilege')

        # Build
        packer build -var "build_resource_group_name=${env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME}" `
                     -var "capture_name_prefix=$(imageResourcePrefix)" `
                     -var "client_id=${env:servicePrincipalId}" `
                     -var "client_secret=${env:servicePrincipalKey}" `
                     -var "install_password=$([system.guid]::NewGuid().ToString().ToUpper()))" `
                     -var "resource_group=${env:PIPELINE_DEMO_PACKER_STORAGE_ACCOUNT_RESOURCE_GROUP_NAME}" `
                     -var "storage_account=${env:PIPELINE_DEMO_PACKER_STORAGE_ACCOUNT_NAME}" `
                     -var "subscription_id=$(az account show --query id -o tsv)" `
                     -var "tenant_id=${env:tenantId}" `
                     -var "virtual_network_name=${env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_NAME}" `
                     -var "virtual_network_resource_group_name=${env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME}" `
                     -var "virtual_network_subnet_name=${env:PIPELINE_DEMO_PACKER_SUBNET_NAME}" `
                     $(imageTemplate) # TODO: Filter sensitive content        

        Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$(git rev-parse HEAD)"
        Write-Host "##vso[task.setvariable variable=shortCommit;isoutput=true]$(git rev-parse --short HEAD)"
      addSpnToEnvironment: true
      failOnStandardError: true
      retryCountOnTaskFailure: $(retryCount)
      workingDirectory: $(imageRepository)
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt

  - task: AzureCLI@2
    name: vhd
    displayName: 'Get VHD url'
    condition: ne(coalesce(variables['imageBuild.commit'],'null'),'null')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }

        # Find VHD 
        az storage blob directory list -c "system" `
                                       -d "Microsoft.Compute/Images/images" `
                                       --account-name $env:PIPELINE_DEMO_PACKER_STORAGE_ACCOUNT_NAME `
                                       --query "[?contains(@.name, '$(imageResourcePrefix)') && ends_with(@.name, 'vhd')].name" `
                                       -o tsv | Set-Variable vhdPath

        $vhdUrl = "https://${env:PIPELINE_DEMO_PACKER_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/system/${vhdPath}"
        Write-Host "vhdUrl: $vhdUrl"
        Write-Host "##vso[task.setvariable variable=url;isoutput=true]$vhdUrl"        
      failOnStandardError: true

  - task: AzureCLI@2
    name: publish
    displayName: 'Publish image'
    condition: ne(coalesce(variables['vhd.url'],'null'),'null')
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }

        # Publish
        $imageDefinitionVersionTags = @(`
          "build=$(Build.BuildId)",`
          "commit=$(imageBuild.commit)",`
          "pipeline=$(Build.DefinitionName)",`
          "versionlabel=$(githubRelease.version)"`
        )
        Write-Host "`nTags that will be applied to image version:"
        $imageDefinitionVersionTags | Format-Table

        if (-not (az sig image-definition list --query "[?name=='$(imageName)']"  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME -o tsv)) {
          az sig image-definition create --gallery-image-definition $(imageName) `
                                         --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                         --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                         --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                         --publisher $(imagePublisher) --offer $(imageOffer) --sku $(imageSKU) `
                                         --os-type $(imageOSType) --os-state Generalized
        }

        # Check whether version exists. If so, increment build number.
        $qualifiedVersionString = "$(githubRelease.qualifiedVersion)"
        $qualifiedVersion = [version]$qualifiedVersionString
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "max_by([?starts_with(name,'$($qualifiedVersion.ToString(2))')],&name).name" `
                                  -o tsv | Set-Variable existingVersionString
        if ($existingVersionString) {
          $existingVersion = [version]$existingVersionString
          $qualifiedVersionString = ("{0}.{1}" -f $existingVersion.ToString(2), ($existingVersion.Build+1))
        }

        Write-Host "`nCreating $(imageName) ${qualifiedVersionString}..."
        az sig image-version create --gallery-image-definition $(imageName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $qualifiedVersionString `
                                    --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                    --no-wait `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --os-vhd-uri "$(vhd.url)" `
                                    --os-vhd-storage-account $env:PIPELINE_DEMO_PACKER_STORAGE_ACCOUNT_NAME `
                                    --tags $imageDefinitionVersionTags

        Write-Host "##vso[task.setvariable variable=qualifiedVersion;isoutput=true]$qualifiedVersionString"
      addSpnToEnvironment: true
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Replicate image'
    condition: and(ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'),ne(coalesce(variables['targetRegions'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "Start replicating $(imageName) $(publish.qualifiedVersion) to '$(targetRegions)'..."
        az sig image-version update --gallery-image-definition $(imageName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $(publish.qualifiedVersion) `
                                    --no-wait `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --target-regions $(targetRegions) # From build-images-isolated variable group
      failOnStandardError: true

  - ${{ if parameters.waitForReplication }}:
    - task: AzureCLI@2
      displayName: 'Wait for replication to finish'
      condition: and(ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'),ne(coalesce(variables['targetRegions'],'null'),'null'))
      inputs:
        azureSubscription: '$(gallerySubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "Waiting for replication of $(imageName) $(publish.qualifiedVersion) to '$(targetRegions)' to finish..."
          az sig image-version wait --updated `
                                    --gallery-image-definition $(imageName) `
                                    --gallery-image-version $(publish.qualifiedVersion) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME 
        failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Check image version of $(imageName)'
    condition: ne(coalesce(variables['githubRelease.version'],'null'),'null')
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?name=='$(publish.qualifiedVersion)' && (provisioningState=='Creating' || provisioningState=='Succeeded')]" `
                                  | ConvertFrom-Json | Set-Variable imageVersion
        if ($imageVersion) {
          $imageVersion | Format-Table
        } else {
          Write-Error "$(imageName) version $(publish.qualifiedVersion) was not published!"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'List published images'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[].{Name:'$ImageDefinitionName', Version:name, Build:tags.build, Label:tags.versionlabel, Commit:tags.commit, Date:publishingProfile.publishedDate, Regions:publishingProfile.targetRegions[*].name, Status:provisioningState}" `
                                  -o json | ConvertFrom-Json `
                                  | Sort-Object -Property Version -Descending | Format-Table -Property Name, Version, Build, Label, Date, Status, Commit, Regions
      failOnStandardError: true

  - ${{ if parameters.destroy }}:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down temporary resources'
      condition: or(always(),canceled())
      inputs:
        azureSubscription: '$(packerSubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Remove resources
          az resource list -g $env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME `
                           --query "[?tags.application=='Pipeline Agents' && tags.build=='$(Build.BuildId)' && tags.image=='$(imageName)'].id" `
                           -o tsv | Set-Variable resourceIDs
          if ($resourceIDs) {
            Write-Host "Removing resources:"
            $resourceIDs
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }
        failOnStandardError: true