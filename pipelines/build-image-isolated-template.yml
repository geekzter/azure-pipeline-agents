parameters:
- name: image
  displayName: Image
  type: string
  values:
  - Ubuntu2004
  - Ubuntu2204
  - Windows2019
  - Windows2022
- name: hyperVGeneration
  displayName: VM generation
  type: string
  values:
  - V1
  - V2
- name: imageReleaseName
# Image Release Name as defined in GitHUb release feed
# https://api.github.com/repos/actions/runner-images/releases
  displayName: Image Release Name
  type: string
- name: imageResourcePrefix
  displayName: Image Resource Prefix
  type: string
- name: destroy
  displayName: Destroy Infrastructure
  type: boolean
  default: true
- name: numberOfVersionsToKeep
  displayName: Number of image versions to keep
  type: number
  default: 5
- name: packerTemplateDirectory
  displayName: Packer template directory # relative path
  type: string
- name: packerTemplateFile
  displayName: Packer template file
  type: string
- name: retryCount
  displayName: Build task retry count
  type: number
  default: 1
- name: upgradeAzureCLI
  displayName: Upgrade Azure CLI to latest version
  type: boolean
  default: false
- name: addMinorImageVersion
  displayName: Create minor version of major version exists
  type: boolean
  default: false
- name: waitForReplication
  displayName: Wait for image replication to finish
  type: boolean
  default: true

jobs:
- job: '${{ parameters.image }}'
  displayName: 'Build & publish ${{ parameters.image }}'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  timeoutInMinutes: 1430

  variables:
  - name: 'addMinorImageVersion'
    value: ${{ lower(or(parameters.addMinorImageVersion,eq(variables['Build.Reason'], 'Schedule'))) }}
  - name: 'agentRepository'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents'
  - name: AZURE_CORE_ONLY_SHOW_ERRORS
    value: 'true'
  - name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
    value: 'yes_without_prompt'
  - name: 'imageGeneration'
    value: '${{ parameters.hyperVGeneration }}'
  - name: 'imageName'
    value: '${{ parameters.image }}'
  - ${{ if eq(parameters.hyperVGeneration,'V1') }}:
    - name: 'imageDefinitionName'
      value: '${{ parameters.image }}'
    - name: 'imagePublisher'
      value: 'PrivatePipelineImages'
  - ${{ else }}:
    - name: 'imageDefinitionName'
      value: '${{ parameters.image }}${{ parameters.hyperVGeneration }}'
    - name: 'imagePublisher'
      value: 'PrivatePipelineImages${{ parameters.hyperVGeneration }}'
    - ${{ if eq(parameters.image,'Windows2019') }}:
      - name: 'baseImageSKU'
        value: '2019-datacenter-gensecond'
    - ${{ elseif eq(parameters.image,'Windows2022') }}:
      - name: 'baseImageSKU'
        value: '2022-datacenter-azure-edition'
    - ${{ elseif eq(parameters.image,'Ubuntu2004') }}:
      - name: 'baseImageSKU'
        value: '20_04-lts-gen2'
    - ${{ elseif eq(parameters.image,'Ubuntu2204') }}:
      - name: 'baseImageSKU'
        value: '22_04-lts-gen2'
  - ${{ if contains(parameters.image,'buntu') }}:
    - name: 'imageOffer'
      value: 'Ubuntu'
    - name: 'imageOSType'
      value: 'linux'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Ubuntu', '') }}
    - name: 'imageSubDirectory'
      value: 'linux'
  - ${{ else }}:
    - name: 'imageOffer'
      value: 'Windows'
    - name: 'imageOSType'
      value: 'windows'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Windows', '') }}
    - name: 'imageSubDirectory'
      value: 'windows'
  - name: 'imageRepository'
    value: '$(Build.SourcesDirectory)/runner-images'
  - name: 'imageReleaseName' 
    value: '${{ parameters.imageReleaseName }}'
  - name: 'imageResourcePrefix' 
    value: '${{ parameters.imageResourcePrefix }}'
  - name: 'imageTemplate'
    value: '$(Build.SourcesDirectory)/runner-images/${{ parameters.packerTemplateDirectory }}/${{ parameters.packerTemplateFile }}'
  - name: 'imageTemplateFileName'
    value: ${{ parameters.packerTemplateFile }}
  - name: 'imageTemplateDirectory'
    value: $(Build.SourcesDirectory)/runner-images/${{ parameters.packerTemplateDirectory }}
  - name: 'numberOfVersionsToKeep' 
    value: ${{ parameters.numberOfVersionsToKeep }}
  - name: 'scriptDirectory'
    value: '$(agentRepository)/scripts'

  steps:
  - checkout: self
  - checkout: runner-images

  - pwsh: |
      $(scriptDirectory)/configure_pwsh_trace.ps1
      
      $PSNativeCommandArgumentPassing = "Legacy"
      $preInstalledAzVersion = ($(az version --query '\"azure-cli\"' -o tsv) -replace "\.\d+$","")
      Write-Host "Azure CLI pre-installed version is '${preInstalledAzVersion}'"
      if ($${{ parameters.upgradeAzureCLI }} -or ($preInstalledAzVersion -in (Get-Content $(agentRepository)/pipelines/azure-cli-versions-to-avoid.txt))) {
        Write-Host "Upgrading Azure CLI version '${preInstalledAzVersion}' to latest..."
        if ($IsLinux) {
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        } else {
          az upgrade --yes
        }
        $installedAzVersion = ($(az version --query '\"azure-cli\"' -o tsv) -replace "\.\d+$","")
        Write-Host "Upgraded Azure CLI version '${preInstalledAzVersion}' to '${installedAzVersion}'"
      }
    displayName: 'Upgrade Azure CLI'

  - pwsh: |
      $(scriptDirectory)/configure_pwsh_trace.ps1
      
      $vmMetadata = (Invoke-RestMethod -Headers @{"Metadata"="true"} -Method GET -NoProxy -Uri "http://169.254.169.254/metadata/instance/compute?api-version=2021-02-01" -TimeoutSec 1)
      $vmMetadata | Add-Member -NotePropertyName hostName -NotePropertyValue $([System.Net.Dns]::GetHostName())
      $vmMetadata | Format-List

      # List environment variables
      Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name

      Write-Host "##vso[task.setvariable variable=location;isoutput=true]$($vmMetadata.location)"
    name: agent
    displayName: 'Retrieve agent information'

  - task: AzureCLI@2
    name: githubRelease
    displayName: 'Get release for $(imageName)'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        (Invoke-RestMethod -Uri https://api.github.com/repos/actions/runner-images/releases) | Where-Object {$_.tag_name -match "$(imageReleaseName)" -and !$_.draft} `
                                                                                             | Sort-Object -Property @{Expression = "created_at"; Descending = $true}, @{Expression = "prerelease"; Ascending = $true}
                                                                                             | Select-Object -First 1 `
                                                                                             | Set-Variable release
        if (!$release) {
          throw "No release found for $(imageReleaseName) at https://api.github.com/repos/actions/runner-images/releases"
        }
        if ($release.prerelease) {
          Write-Warning "Only prerelease version(s) exists of $(imageReleaseName)"
        }
        Write-Host "`nLatest version ($version) of $(imageName) at https://github.com/actions/runner-images/releases:"
        $release | Format-List

        $releaseVersion = $release.tag_name.Split("/")[1]
        $version = [version]"${releaseVersion}.0.0"
        $twoPartVersionString = $version.ToString(2)
        $threePartVersionString = $version.ToString(3)

        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?starts_with(name,'${twoPartVersionString}') && (provisioningState=='Creating' || provisioningState=='Succeeded') && !(publishingProfile.excludeFromLatest)]" `
                                  | ConvertFrom-Json | Set-Variable imageVersion

        $addMinorImageVersion = $$(addMinorImageVersion)
        if ($imageVersion) {
          Write-Host "Image Definition '$(imageDefinitionName)' with version '$twoPartVersionString' already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}:"
          if ($addMinorImageVersion) {
            Write-Host "Adding new minor image version to existing major image version"
          }
          $imageVersion | Format-List
        } else {
          Write-Host "Image Definition '$(imageDefinitionName)' with version '$twoPartVersionString' doesn't exist yet in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
        }

        $createImage = ($addMinorImageVersion -or !$imageVersion)
        if ($createImage) {
          Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$($release.target_commitish)"
          Write-Host "##vso[task.setvariable variable=qualifiedVersion;isoutput=true]$threePartVersionString"
          Write-Host "##vso[task.setvariable variable=version;isoutput=true]$releaseVersion"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]true"
        } else {
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]false"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    name: packerConfig
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'))
    displayName: 'Update Packer configuration'
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1

        Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse -Force -ErrorAction SilentlyContinue | Select-Object FullName
      
        $packerTemplateFileName = "$(imageTemplateFileName)"

        # Update template to override configuration not accessible as variables
        $azureTags = @{
          application = "${env:PIPELINE_DEMO_APPLICATION_NAME}"
          build = "$(Build.BuildId)"
          commit = "$(git rev-parse HEAD)"
          qualifiedVersion = "$(githubRelease.qualifiedVersion)"
          image = "$(imageName)"
          owner = "${env:PIPELINE_DEMO_APPLICATION_OWNER}"
          pipeline = "$(Build.DefinitionName)"
          shutdown = "false"
          versionlabel = "$(githubRelease.version)"
        }
        if ($packerTemplateFileName -match "json") {
          # This only works for JSON
          Get-Content $packerTemplateFileName | ConvertFrom-Json -AsHashtable | Set-Variable packerTemplate
          $packerTemplate.builders[0]["azure_tags"] = $azureTags
          Write-Host "`nTags that will be applied to build resources:"
          $packerTemplate.builders[0]["azure_tags"] | Format-Table
          if ($${{ eq(parameters.hyperVGeneration,'V2') }}) {
            $packerTemplate.builders[0]["image_sku"] = "$(baseImageSKU)"
          }
          Write-Host "`nPacker template:"
          $packerTemplate | ConvertTo-Json -Depth 5
          $packerTemplate | ConvertTo-Json -Depth 5 | Set-Content $packerTemplateFileName
          $packerTemplateArgument = $packerTemplateFileName
        } else {
          # HCL
          $packerHCLVarsContent="azure_tag = {"
          foreach ($key in $azureTags.Keys) {
            $packerHCLVarsContent += "`n$key=`"$($azureTags[$key])`""
          }
          $packerHCLVarsContent += "`n}"
          $packerHCLVarsContent += "`n"
          $packerHCLVarsFile = "overrides.auto.pkrvars.hcl"
          $packerHCLVarsContent | Set-Content $packerHCLVarsFile
          Get-Content $packerHCLVarsFile

          # replace image_sku value in .pkr.hcl
          if ($${{ eq(parameters.hyperVGeneration,'V2') }}) {
            (Get-Content $packerTemplateFileName) -replace "image_sku\W*=.*$","image_sku = `"$(baseImageSKU)`"" `
                                                  | Tee-Object -Variable packerTemplateContent
            Set-Content $packerTemplateFileName -Value $packerTemplateContent -Force
          }

          $packerTemplateArgument = "."
        }

        # Remove HCL files from other image templates residing in the same directory
        Remove-Item *.hcl -Exclude $packerTemplateFileName, $packerHCLVarsFile

        # Test Packer configuration, listing variables
        packer inspect $packerTemplateArgument

        # Create custom template parameters
        $imageVMPassword = [system.guid]::NewGuid().ToString().ToUpper()
        $packerTemplateParameters = @{
          build_resource_group_name           = $env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME
          client_id                           = $env:servicePrincipalId
          client_secret                       = $env:servicePrincipalKey
          install_password                    = $imageVMPassword
          managed_image_name                  = "$(imageName)-$(githubRelease.qualifiedVersion)"
          managed_image_resource_group_name   = $env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME
          subscription_id                     = $(az account show --query id -o tsv)
          tenant_id                           = $env:tenantId
          virtual_network_name                = $env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_NAME
          virtual_network_resource_group_name = $env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME
          virtual_network_subnet_name         = $env:PIPELINE_DEMO_PACKER_SUBNET_NAME
        }
        
        $packerTemplateParameters | ConvertTo-Json -Compress | Set-Variable packerTemplateParametersJson
        Write-Host "`nCustom template parameters:"
        $packerTemplateParameters['client_secret'] = '***'
        $packerTemplateParameters['install_password'] = '***'
        $packerTemplateParameters | Format-Table
        $packerTemplateParameters | ConvertTo-Json | Write-Host

        Write-Host "##vso[task.setvariable variable=templateArgument;isoutput=true]$packerTemplateArgument"
        Write-Host "##vso[task.setvariable variable=packerTemplateParametersJson;isoutput=true;issecret=true]$packerTemplateParametersJson"
      addSpnToEnvironment: true
      failOnStandardError: true
      workingDirectory: $(imageTemplateDirectory)

  - bash: |
      find . *.ps1
      find . *.ps1 | xargs chmod +x
      ls -alR $(imageTemplateDirectory)/../scripts
      ls /home/vsts/work/1/s/runner-images/images/windows/templates/../scripts/build/Install-PowershellModules.ps1
    displayName: 'Make PowerShell scripts executable'
    workingDirectory: $(imageRepository)

  # Does not support HCL files and therefore Ubuntu 22.04
  - task: PackerBuild@1
    displayName: 'Packer build (JSON)'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'), endsWith(variables['imageTemplate'],'json'))
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
    inputs:
      templateType: 'custom'
      customTemplateLocation: '$(imageTemplate)'
      customTemplateParameters: '$(packerConfig.packerTemplateParametersJson)'
      connectedServiceName: '$(packerSubscriptionConnection)'

  - task: AzureCLI@2
    displayName: 'Packer build (HCL)'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'), endsWith(variables['imageTemplate'],'hcl'))
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        # Checkout source pertaining to release is not recommended
        # https://github.com/actions/runner-images/issues/4238#issuecomment-939732274
        # https://github.com/actions/runner-images/discussions/4362
        # We assume main branch is the latest released version

        # TODO: Secret-free authentication

        # Build
        packer build -force `
                     -var "build_resource_group_name=${env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME}" `
                     -var "client_id=${env:servicePrincipalId}" `
                     -var "client_secret=${env:servicePrincipalKey}" `
                     -var "install_password=$([system.guid]::NewGuid().ToString().ToUpper()))" `
                     -var "managed_image_name=$(imageName)-$(githubRelease.qualifiedVersion)" `
                     -var "managed_image_resource_group_name=${env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME}" `
                     -var "subscription_id=$(az account show --query id -o tsv)" `
                     -var "tenant_id=${env:tenantId}" `
                     -var "virtual_network_name=${env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_NAME}" `
                     -var "virtual_network_resource_group_name=${env:PIPELINE_DEMO_PACKER_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME}" `
                     -var "virtual_network_subnet_name=${env:PIPELINE_DEMO_PACKER_SUBNET_NAME}" `
                     $(packerConfig.templateArgument) # TODO: Filter sensitive content        

        $exitCode = $LASTEXITCODE
        if ($exitCode -eq 0) {
          Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$(git rev-parse HEAD)"
          Write-Host "##vso[task.setvariable variable=shortCommit;isoutput=true]$(git rev-parse --short HEAD)"
        } else {
          Write-Host "##vso[task.logissue type=error]'packer build' exited with status $exitCode"
          throw "'packer build' exited with status $exitCode"
        }
      addSpnToEnvironment: true
      failOnStandardError: true
      workingDirectory: $(imageTemplateDirectory)
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt

  - task: AzureCLI@2
    name: managedImage
    displayName: 'Get image resource id'
    condition: and(succeeded(), ne(coalesce(variables['packerConfig.packerTemplateParametersJson'],'null'),'null'))
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1

        "{0}/providers/Microsoft.Compute/images/{1}-{2}" -f $env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_ID,'$(imageName)','$(githubRelease.qualifiedVersion)' `
                                                         | Set-Variable imageResourceId

        az image show --ids $imageResourceId 
        Write-Host "##vso[task.setvariable variable=imageResourceId;isoutput=true]$imageResourceId"
      useGlobalConfig: true
      failOnStandardError: true

  - task: AzureCLI@2
    name: publish
    displayName: 'Publish image'
    condition: and(succeeded(), ne(coalesce(variables['managedImage.imageResourceId'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        # Publish
        $imageDefinitionVersionTags = @(`
          "application=${env:PIPELINE_DEMO_APPLICATION_NAME}",`
          "build=$(Build.BuildId)",`
          "buildlink=${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}",`
          "owner=${env:PIPELINE_DEMO_APPLICATION_OWNER}",`
          "pipeline=$(Build.DefinitionName)",`
          "provisioner=azure-cli",`
          "versionlabel=$(githubRelease.version)"`
        )
        Write-Host "`nTags that will be applied to image version:"
        $imageDefinitionVersionTags | Format-Table

        if (-not (az sig image-definition list --query "[?name=='$(imageDefinitionName)']"  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME -o tsv)) {
          Write-Host "`nCreating image definition $(imageDefinitionName)..."
          az sig image-definition create --gallery-image-definition $(imageDefinitionName) `
                                         --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                         --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                         --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                         --publisher $(imagePublisher) --offer $(imageOffer) --sku $(imageSKU) `
                                         --os-type $(imageOSType) --os-state Generalized `
                                         --hyper-v-generation $(imageGeneration) `
                                         --query id -o tsv | Set-Variable imageDefinitionId
                                         
          # BUG: https://github.com/Azure/azure-cli/issues/23194
          # FIX: Set tag separately
          az tag create --resource-id $imageDefinitionId --tags $imageDefinitionVersionTags
        }

        # Check whether version exists. If so, increment build number.
        $qualifiedVersionString = "$(githubRelease.qualifiedVersion)"
        $qualifiedVersion = [version]$qualifiedVersionString
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "max_by([?starts_with(name,'$($qualifiedVersion.ToString(2))')],&name).name" `
                                  -o tsv | Set-Variable existingVersionString
        if ($existingVersionString) {
          $existingVersion = [version]$existingVersionString
          $qualifiedVersionString = ("{0}.{1}" -f $existingVersion.ToString(2), ($existingVersion.Build+1))
        }

        Write-Host "`nCreating image version $(imageDefinitionName) ${qualifiedVersionString}..."
        az sig image-version create --gallery-image-definition $(imageDefinitionName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $qualifiedVersionString `
                                    --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --managed-image $(managedImage.imageResourceId) `
                                    --no-wait `
                                    --query id -o tsv | Set-Variable imageVersionId

        Write-Host "##vso[task.setvariable variable=qualifiedVersion;isoutput=true]$qualifiedVersionString"
      addSpnToEnvironment: true
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Replicate image'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'),ne(coalesce(variables['targetRegions'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        Write-Host "Starting replication of $(imageDefinitionName) $(publish.qualifiedVersion) to: $(targetRegions)..."
        az sig image-version update --gallery-image-definition $(imageDefinitionName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $(publish.qualifiedVersion) `
                                    --no-wait `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --target-regions $(targetRegions) # From build-images-isolated variable group
      failOnStandardError: true

  - ${{ if parameters.waitForReplication }}:
    - task: AzureCLI@2
      displayName: 'Wait for replication to finish'
      condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'),ne(coalesce(variables['targetRegions'],'null'),'null'))
      inputs:
        azureSubscription: '$(gallerySubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/configure_pwsh_trace.ps1
      
          Write-Host "Waiting for replication of $(imageDefinitionName) $(publish.qualifiedVersion) to $(targetRegions) to finish..."
          az sig image-version wait --updated `
                                    --gallery-image-definition $(imageDefinitionName) `
                                    --gallery-image-version $(publish.qualifiedVersion) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME 
          
        failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Check image version of $(imageDefinitionName)'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.version'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?name=='$(publish.qualifiedVersion)' && (provisioningState=='Creating' || provisioningState=='Succeeded')]" `
                                  | ConvertFrom-Json | Set-Variable imageVersion
        if ($imageVersion) {
          # BUG: https://github.com/Azure/azure-cli/issues/23194
          # FIX: Set tag separately
          $imageDefinitionVersionTags = @(`
            "application=${env:PIPELINE_DEMO_APPLICATION_NAME}",`
            "build=$(Build.BuildId)",`
            "buildlink=${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}",`
            "owner=${env:PIPELINE_DEMO_APPLICATION_OWNER}",`
            "pipeline=$(Build.DefinitionName)",`
            "provisioner=azure-cli",`
            "versionlabel=$(githubRelease.version)"`
          )
          az tag create --resource-id $imageVersion.id --tags $imageDefinitionVersionTags

          $imageVersion | Format-List
        } else {
          Write-Error "$(imageDefinitionName) version $(publish.qualifiedVersion) was not published!"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Purge older (than $(numberOfVersionsToKeep) newest) image versions'
    condition: and(succeeded(), ne(coalesce(variables['publish.qualifiedVersion'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        $numberOfVersionsToKeep = [math]::Max($(numberOfVersionsToKeep),1)
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "reverse(sort_by([],&name)) | [${numberOfVersionsToKeep}:].id" `
                                  -o tsv | Set-Variable imageVersionIDsToPurge

        if ($imageVersionIDsToPurge) {
            Write-Host "`nDeleting $(imageDefinitionName) version(s): ${imageVersionIDsToPurge}..."
            az resource delete --ids $imageVersionIDsToPurge
        } else {
            Write-Host "No $(imageDefinitionName) versions to delete"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'List published images'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $(scriptDirectory)/configure_pwsh_trace.ps1
      
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[].{Name:'$ImageDefinitionName', Version:name, Build:tags.build, Label:tags.versionlabel, Commit:tags.commit, Date:publishingProfile.publishedDate, Regions:publishingProfile.targetRegions[*].name, Status:provisioningState}" `
                                  -o json | ConvertFrom-Json `
                                  | Sort-Object -Property Version -Descending | Format-Table -Property Name, Version, Build, Label, Date, Status, Commit, Regions
      failOnStandardError: true

  - ${{ if parameters.destroy }}:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down temporary resources'
      condition: or(always(),canceled())
      inputs:
        azureSubscription: '$(packerSubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(scriptDirectory)/configure_pwsh_trace.ps1
      
          # Remove resources
          az resource list -g $env:PIPELINE_DEMO_PACKER_BUILD_RESOURCE_GROUP_NAME `
                           --query "[?tags.application=='Pipeline Agents' && tags.build=='$(Build.BuildId)' && tags.image=='$(imageName)'].id" `
                           -o tsv | Set-Variable resourceIDs
          if ($resourceIDs) {
            Write-Host "Removing resources:"
            $resourceIDs
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }
        failOnStandardError: true