parameters:
- name: image
  displayName: Image
  type: string
  default: Ubuntu1804
  values:
  - Ubuntu1804
  - Ubuntu2004
  - Windows2019
  - Windows2022
- name: imageReleaseName
# Image Release Name as defined in GitHUb release feed
# https://api.github.com/repos/actions/virtual-environments/releases
  displayName: Image Release Name
  type: string
- name: imageResourceGroup
  displayName: Image Resource Group
  type: string
  default: packer
- name: destroy
  displayName: Destroy Infrastructure
  type: boolean
  default: true
- name: retryCount
  displayName: Build task retry count
  type: number
  default: 1

jobs:
- job: '${{ parameters.image }}'
  displayName: 'Build & publish ${{ parameters.image }}'
  pool:
    name: 'Azure Pipelines'
    vmImage: ubuntu-latest
  timeoutInMinutes: 360

  variables:
  - name: 'agentRepository'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents'
  - name: 'agentScriptDirectory'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents/scripts'
  - name: AZURE_CORE_ONLY_SHOW_ERRORS
    value: 'true'
  - name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
    value: 'yes_without_prompt'
  - name: 'galleryResourceGroup' 
    value: 'Shared'
  - name: 'imageConfigFile'
    value: '${{ lower(parameters.image) }}.json'
  - name: 'imageName'
    value: '${{ parameters.image }}'
  - name: 'imageDefinitionName'
    value: '${{ parameters.image }}'
  - ${{ if contains(parameters.image,'buntu') }}:
    - name: 'imageOffer'
      value: 'Ubuntu'
    - name: 'imageOSType'
      value: 'linux'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Ubuntu', '') }}
    - name: 'imageSubDirectory'
      value: 'linux'
  - ${{ else }}:
    - name: 'imageOffer'
      value: 'Windows'
    - name: 'imageOSType'
      value: 'windows'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Windows', '') }}
    - name: 'imageSubDirectory'
      value: 'win'
  - name: 'imagePublisher'
    value: 'PrivatePipelineImages'
  - name: 'imageRepository'
    value: '$(Build.SourcesDirectory)/virtual-environments'
  - name: 'imageReleaseName' 
    value: '${{ parameters.imageReleaseName }}'
  - name: 'imageResourceGroup' 
    value: '${{ parameters.imageResourceGroup }}'
  - name: 'imageScriptDirectory'
    value: '$(Build.SourcesDirectory)/virtual-environments/helpers'
  - name: 'retryCount' 
    value: ${{ parameters.retryCount }}

  steps:
  - checkout: self
  - checkout: virtual-environments

  - task: AzureCLI@2
    name: githubRelease
    displayName: 'Get release for $(imageDefinitionName)'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        (Invoke-RestMethod -Uri https://api.github.com/repos/actions/virtual-environments/releases) | Where-Object {$_.tag_name -match "$(imageReleaseName)" -and !$_.draft -and !$_.prerelease} `
                                                                                                    | Select-Object -First 1 `
                                                                                                    | Set-Variable release
        $releaseVersion = $release.tag_name.Split("/")[1]
        Write-Host "`nLatest version ($releaseVersion) of $(imageDefinitionName) at https://github.com/actions/virtual-environments/releases:"
        $release | Format-List
        $fullyQualifiedReleaseVersion = ([version]"${releaseVersion}.0.0").ToString(3)

        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?name=='${fullyQualifiedReleaseVersion}']" `
                                  | ConvertFrom-Json | Set-Variable imageVersion
        
        # if ($imageVersion) {
        #   Write-Host "Image Definition '$(imageDefinitionName)' with version '$fullyQualifiedReleaseVersion' already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}:"
        #   $imageVersion | Format-List
        #   Write-Warning "Build & publish of '$releaseVersion' will be skipped as it already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
        #   Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]false"
        # } else {
          Write-Warning "Image Definition '$(imageDefinitionName)' with version '$fullyQualifiedReleaseVersion' doesn't exist yet in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
          Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$($release.target_commitish)"
          Write-Host "##vso[task.setvariable variable=tag;isoutput=true]$($release.tag_name)"
          Write-Host "##vso[task.setvariable variable=version;isoutput=true]$releaseVersion"
          Write-Host "##vso[task.setvariable variable=fullyQualifiedVersion;isoutput=true]$fullyQualifiedReleaseVersion"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]true"
        # }
      failOnStandardError: true

  - task: AzureCLI@2
    name: servicePrincipal
    displayName: 'Fetch build credentials'
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=clientId;isoutput=true]${env:servicePrincipalId}"
        Write-Host "##vso[task.setvariable variable=clientSecret;isoutput=true;issecret=true]${env:servicePrincipalKey}"
        Write-Host "##vso[task.setvariable variable=tenantId;isoutput=true]${env:tenantId}"
      addSpnToEnvironment: true
      failOnStandardError: true

  # https://github.com/actions/virtual-environments/blob/main/docs/create-image-and-azure-resources.md
  - task: AzurePowerShell@5
    name: imageBuild
    displayName: 'Build image'
    condition: ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: inlineScript
      inline: |
        # Patch GenerateResourcesAndImage.ps1 to improve build time
        (Get-Content -Raw ./GenerateResourcesAndImage.ps1) -replace "Standard_LRS","Premium_LRS" | Set-Content ./GenerateResourcesAndImage.ps1

        $env:PIPELINE_DEMO_PACKER_LOCATION ??= "centralus"

        # # Build
        # Import-Module ./GenerateResourcesAndImage.ps1
        # Get-AzContext | Select-Object -ExpandProperty Subscription | Select-Object -ExpandProperty Id | Set-Variable subscriptionId
        # GenerateResourcesAndImage -SubscriptionId $subscriptionId `
        #                           -ResourceGroupName $(imageResourceGroup) `
        #                           -ImageGenerationRepositoryRoot "$(imageRepository)" `
        #                           -ImageType $(imageName) `
        #                           -AzureLocation $env:PIPELINE_DEMO_PACKER_LOCATION `
        #                           -AzureClientId $(servicePrincipal.clientId) `
        #                           -AzureClientSecret "$(servicePrincipal.clientSecret)" `
        #                           -AzureTenantId $(servicePrincipal.tenantId) `
        #                           -RestrictToAgentIpAddress

        # Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$(git rev-parse HEAD)"
        # Write-Host "##vso[task.setvariable variable=shortCommit;isoutput=true]$(git rev-parse --short HEAD)"
      azurePowerShellVersion: 'latestVersion'
      pwsh: true
      failOnStandardError: true
      retryCountOnTaskFailure: $(retryCount)
      workingDirectory: '$(imageScriptDirectory)'

  - task: AzureCLI@2
    name: vhd
    displayName: 'Get VHD url'
    condition: ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Find storage account created
        az storage account list -g $packerResourceGroupName $(imageResourceGroup) `
                                --query "[0]" -o json | ConvertFrom-Json `
                                | Set-Variable storageAccount
        $storageAccount | Format-List

        # Find VHD 
        az storage blob directory list -c "system" `
                                       -d "Microsoft.Compute/Images/images" `
                                       --account-name $($storageAccount.name) `
                                       --query "[?ends_with(@.name, 'vhd')]" | ConvertFrom-Json `
                                       | Set-Variable vhdBlob
        $vhdBlob | Format-List
        $vhdBlob.metadata | Format-List
        $vhdBlob.properties | Format-List     

        $vhdUrl = "$($storageAccount.primaryEndpoints.blob)system/$($vhdBlob.name)"
        Write-Host "`$vhdUrl: $vhdUrl"
        Write-Host "##vso[task.setvariable variable=storageAccountName;isoutput=true]$($storageAccount.name)"
        Write-Host "##vso[task.setvariable variable=url;isoutput=true]$vhdUrl"
      useGlobalConfig: true
      failOnStandardError: true

  - task: AzureCLI@2
    name: publish
    displayName: 'Publish image'
    # condition: ne(coalesce(variables['vhd.url'],'null'),'null')
    condition: ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false')
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        if (-not (az sig image-definition list --query "[?name=='$(imageDefinitionName)']"  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME -o tsv)) {
          az sig image-definition create --gallery-image-definition $(imageDefinitionName) `
                                         --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                         --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                         --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                         --publisher $(imagePublisher) --offer $(imageOffer) --sku $(imageSKU) `
                                         --os-type $(imageOSType) --os-state Generalized
        }

        Write-Host "Creating $(imageDefinitionName) $(githubRelease.fullyQualifiedVersion)..."
        Write-Host "az sig image-version create --exclude-from-latest true --gallery-image-definition $(imageDefinitionName) --gallery-name ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME} --gallery-image-version $(githubRelease.fullyQualifiedVersion) --location ${env:PIPELINE_DEMO_PACKER_LOCATION} --no-wait --resource-group ${env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME} --target-regions $TargetRegion --os-vhd-uri `"$(vhd.url)`" --os-vhd-storage-account $(vhd.storageAccountName)"

        az sig image-version create --exclude-from-latest true `
                                    --gallery-image-definition $(imageDefinitionName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $(githubRelease.fullyQualifiedVersion) `
                                    --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                    --no-wait `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --target-regions $TargetRegion `
                                    --os-vhd-uri "$(vhd.url)" `
                                    --os-vhd-storage-account $(vhd.storageAccountName) 
      failOnStandardError: true

  - task: AzureCLI@2
    name: replicate
    displayName: 'Replicate image'
    # condition: ne(coalesce(variables['vhd.url'],'null'),'null')
    condition: ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false')
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "Waiting for $(imageDefinitionName) $(githubRelease.fullyQualifiedVersion) to finish replicating..."
        Write-Host "az sig image-version wait --created --gallery-image-definition $(imageDefinitionName) --gallery-image-version $(githubRelease.fullyQualifiedVersion) --gallery-name ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME} --resource-group ${env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME}"

        az sig image-version wait --created `
                                  --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-image-version $(githubRelease.fullyQualifiedVersion) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME 
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'List published images'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  -o table
      failOnStandardError: true

  - ${{ if parameters.destroy }}:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down temporary resources'
      condition: always() # succeededOrFailed()
      inputs:
        azureSubscription: '$(packerSubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "[?name=='$(imageResourceGroup)'].id" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }
        failOnStandardError: true
