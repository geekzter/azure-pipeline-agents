parameters:
- name: image
  displayName: Image
  type: string
  default: Ubuntu1804
  values:
  - Ubuntu1804
  - Ubuntu2004
  - Windows2019
  - Windows2022
- name: imageReleaseName
# Image Release Name as defined in GitHUb release feed
# https://api.github.com/repos/actions/virtual-environments/releases
  displayName: Image Release Name
  type: string
- name: imageResourceGroup
  displayName: Image Resource Group
  type: string
  default: packer
- name: destroy
  displayName: Destroy Infrastructure
  type: boolean
  default: true
- name: excludeFromLatest
  displayName: Exclude from latest
  type: boolean
  default: true
- name: numberOfVersionsToKeep
  displayName: Number of image versions to keep
  type: number
  default: 4

jobs:
- job: '${{ parameters.image }}'
  displayName: 'Build & publish ${{ parameters.image }}'
  pool:
    name: 'Azure Pipelines'
    vmImage: ubuntu-latest
  timeoutInMinutes: 360

  variables:
  - name: AZURE_CORE_ONLY_SHOW_ERRORS
    value: 'true'
  - name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
    value: 'yes_without_prompt'
  - name: excludeFromLatest
    value: '${{ parameters.excludeFromLatest }}'
  - name: 'imageName'
    value: '${{ parameters.image }}'
  - ${{ if contains(parameters.image,'buntu') }}:
    - name: 'imageOffer'
      value: 'Ubuntu'
    - name: 'imageOSType'
      value: 'linux'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Ubuntu', '') }}
    - name: 'imageSubDirectory'
      value: 'linux'
  - ${{ else }}:
    - name: 'imageOffer'
      value: 'Windows'
    - name: 'imageOSType'
      value: 'windows'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Windows', '') }}
    - name: 'imageSubDirectory'
      value: 'win'
  - name: 'imagePublisher'
    value: 'PrivatePipelineImages'
  - name: 'imageReleaseName' 
    value: '${{ parameters.imageReleaseName }}'
  - name: 'imageResourceGroup' 
    # value: '${{ parameters.imageResourceGroup }}'
    value: replace('${{ parameters.imageResourceGroup }}','pipeline-',format('{0}-',coalesce(variables['PIPELINE_DEMO_RESOURCE_PREFIX'],'pipeline')))
  - name: 'numberOfVersionsToKeep' 
    value: ${{ parameters.numberOfVersionsToKeep }}

  steps:
  - checkout: self
  - checkout: virtual-environments

  - pwsh: |
      $requiredVariables = @(
        "PIPELINE_DEMO_PACKER_LOCATION",`
        # "PIPELINE_DEMO_RESOURCE_PREFIX",`
        "PIPELINE_DEMO_COMPUTE_GALLERY_NAME",`
        "PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME"`
      )
      foreach ($var in @($requiredVariables)) {
        if (!(Test-Path env:$var)) {
          Write-Warning "Variable ${var} not set"
          $fail = $true
        }
      }
      if ($fail) {
        Write-Error "Some variables have not been set, set them in variable group 'build-images'"
      }
    name: variableValidation
    displayName: 'Validate variables'

  - task: AzureCLI@2
    name: githubRelease
    displayName: 'Get release for $(imageName)'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        (Invoke-RestMethod -Uri https://api.github.com/repos/actions/virtual-environments/releases) | Where-Object {$_.tag_name -match "$(imageReleaseName)" -and !$_.draft -and !$_.prerelease} `
                                                                                                    | Select-Object -First 1 `
                                                                                                    | Set-Variable release
        $releaseVersion = $release.tag_name.Split("/")[1]
        Write-Host "`nLatest version ($releaseVersion) of $(imageName) at https://github.com/actions/virtual-environments/releases:"
        $release | Format-List
        $qualifiedReleaseVersionString = ([version]"${releaseVersion}.0.0").ToString(3)

        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "[?name=='${qualifiedReleaseVersionString}' && (provisioningState=='Creating' || provisioningState=='Succeeded')]" `
                                  | ConvertFrom-Json | Set-Variable imageVersion
        
        if ($imageVersion) {
          Write-Host "Image Definition '$(imageName)' with version '$qualifiedReleaseVersionString' already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}:"
          $imageVersion | Format-List
          Write-Warning "Build & publish of '$releaseVersion' will be skipped as it already exists in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]false"
        } else {
          Write-Warning "Image Definition '$(imageName)' with version '$qualifiedReleaseVersionString' doesn't exist yet in gallery ${env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME}"
          Write-Host "##vso[task.setvariable variable=fullyQualifiedVersion;isoutput=true]$qualifiedReleaseVersionString"
          Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]true"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    name: servicePrincipal
    displayName: 'Fetch build credentials'
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "##vso[task.setvariable variable=clientId;isoutput=true]${env:servicePrincipalId}"
        Write-Host "##vso[task.setvariable variable=clientSecret;isoutput=true;issecret=true]${env:servicePrincipalKey}"
        Write-Host "##vso[task.setvariable variable=tenantId;isoutput=true]${env:tenantId}"
      addSpnToEnvironment: true
      failOnStandardError: true

  # https://github.com/actions/virtual-environments/blob/main/docs/create-image-and-azure-resources.md
  - task: AzurePowerShell@5
    name: imageBuild
    displayName: 'Build image'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'))
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: inlineScript
      inline: |
        # Patch GenerateResourcesAndImage.ps1 to decrease build time
        (Get-Content -Raw ./GenerateResourcesAndImage.ps1) -replace "Standard_LRS","Premium_LRS" | Set-Content ./GenerateResourcesAndImage.ps1

        # Build
        Import-Module ./GenerateResourcesAndImage.ps1
        Get-AzContext | Select-Object -ExpandProperty Subscription | Select-Object -ExpandProperty Id | Set-Variable subscriptionId
        GenerateResourcesAndImage -SubscriptionId $subscriptionId `
                                  -ResourceGroupName $(imageResourceGroup) `
                                  -ImageGenerationRepositoryRoot "$(Build.SourcesDirectory)/virtual-environments" `
                                  -ImageType $(imageName) `
                                  -AzureLocation $env:PIPELINE_DEMO_PACKER_LOCATION `
                                  -AzureClientId $(servicePrincipal.clientId) `
                                  -AzureClientSecret "$(servicePrincipal.clientSecret)" `
                                  -AzureTenantId $(servicePrincipal.tenantId) `
                                  -RestrictToAgentIpAddress
      azurePowerShellVersion: 'latestVersion'
      pwsh: true
      failOnStandardError: true
      workingDirectory: '$(Build.SourcesDirectory)/virtual-environments/helpers'

  - task: AzureCLI@2
    name: vhd
    displayName: 'Get VHD url'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'))
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Find storage account created
        az storage account list -g $packerResourceGroupName $(imageResourceGroup) `
                                --query "[0]" -o json | ConvertFrom-Json `
                                | Set-Variable storageAccount

        # Find VHD 
        az storage blob directory list -c "system" `
                                       -d "Microsoft.Compute/Images/images" `
                                       --account-name $($storageAccount.name) `
                                       --query "[?ends_with(@.name, 'vhd')].name" `
                                       -o tsv | Set-Variable vhdPath

        $vhdBaseUrl = "$($storageAccount.primaryEndpoints.blob)system"
        if ($vhdPath) {
          $vhdUrl = "${vhdBaseUrl}/${vhdPath}"
          Write-Host "vhdUrl: $vhdUrl"
          Write-Host "##vso[task.setvariable variable=storageAccountName;isoutput=true]$($storageAccount.name)"
          Write-Host "##vso[task.setvariable variable=url;isoutput=true]$vhdUrl"
        } else {
          throw "VHD not found in ${vhdBaseUrl}, image build of '$(imageName)' was not successful"
        }
      useGlobalConfig: true
      failOnStandardError: true

  - task: AzureCLI@2
    name: publish
    displayName: 'Publish image'
    condition: and(succeeded(), ne(coalesce(variables['vhd.url'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $imageDefinitionVersionTags = @(`
          "application=Pipeline Images",`
          "build=$(Build.BuildId)",`
          "buildlink=${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}",`
          "pipeline=$(Build.DefinitionName)",`
          "provisioner=azure-cli",`
          "versionlabel=$(githubRelease.fullyQualifiedVersion)"`
        )
        Write-Host "`nTags that will be applied to image version:"
        $imageDefinitionVersionTags | Format-Table

        if (-not (az sig image-definition list --query "[?name=='$(imageName)']"  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME -o tsv)) {
          Write-Host "`nCreating image definition $(imageName)..."
          az sig image-definition create --gallery-image-definition $(imageName) `
                                         --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                         --location $env:PIPELINE_DEMO_PACKER_LOCATION `
                                         --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                         --publisher $(imagePublisher) --offer $(imageOffer) --sku $(imageSKU) `
                                         --os-type $(imageOSType) --os-state Generalized `
                                         --query id -o tsv | Set-Variable imageDefinitionId
                                         
          # BUG: https://github.com/Azure/azure-cli/issues/23194
          # FIX: Set tag separately
          az tag create az --resource-id $imageDefinitionId --tags $imageDefinitionVersionTags
        }

        Write-Host "`nCreating image version $(imageName) $(githubRelease.fullyQualifiedVersion)..."
        az sig image-version create --exclude-from-latest $(excludeFromLatest) `
                                    --gallery-image-definition $(imageName) `
                                    --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                    --gallery-image-version $(githubRelease.fullyQualifiedVersion) `
                                    --no-wait `
                                    --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                    --os-vhd-uri "$(vhd.url)" `
                                    --os-vhd-storage-account $(vhd.storageAccountName) `
                                    --query id -o tsv | Set-Variable imageVersionId

          # BUG: https://github.com/Azure/azure-cli/issues/23194
          # FIX: Set tag separately
          az tag create az --resource-id $imageVersionId --tags $imageDefinitionVersionTags
      failOnStandardError: true

  - task: AzureCLI@2
    name: replicate
    displayName: 'Replicate image'
    condition: and(succeeded(), ne(coalesce(variables['githubRelease.newImageVersion'],'false'),'false'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "Waiting for $(imageName) $(githubRelease.fullyQualifiedVersion) to finish replicating..."
        az sig image-version wait --created `
                                  --gallery-image-definition $(imageName) `
                                  --gallery-image-version $(githubRelease.fullyQualifiedVersion) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME 
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'Purge older (than $(numberOfVersionsToKeep) newest) image versions'
    condition: and(succeeded(), ne(coalesce(variables['vhd.url'],'null'),'null'))
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $numberOfVersionsToKeep = [math]::Max($(numberOfVersionsToKeep),1)
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  --query "reverse(sort_by([],&name)) | [${numberOfVersionsToKeep}:].id" `
                                  -o tsv | Set-Variable imageVersionIDsToPurge

        if ($imageVersionIDsToPurge) {
            Write-Host "`nDeleting $(imageName) version(s): ${imageVersionIDsToPurge}..."
            az resource delete --ids $imageVersionIDsToPurge
        } else {
            Write-Host "No $(imageName) versions to delete"
        }
      failOnStandardError: true

  - task: AzureCLI@2
    displayName: 'List published images'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az sig image-version list --gallery-image-definition $(imageName) `
                                  --gallery-name $env:PIPELINE_DEMO_COMPUTE_GALLERY_NAME `
                                  --resource-group $env:PIPELINE_DEMO_COMPUTE_GALLERY_RESOURCE_GROUP_NAME `
                                  -o table
      failOnStandardError: true

  - ${{ if parameters.destroy }}:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down temporary resources'
      condition: always()
      inputs:
        azureSubscription: '$(packerSubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "[?name=='$(imageResourceGroup)'].id" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }
        failOnStandardError: true
