parameters:
- name: image
  displayName: Image
  type: string
  default: Ubuntu1804
  values:
  - Ubuntu1804
  - Ubuntu2004
  - Windows2019
  - Windows2022
- name: imageReleaseName
# Image Release Name as defined in GitHUb release feed
# https://api.github.com/repos/actions/virtual-environments/releases
  displayName: Image Release Name
  type: string
- name: imageResourceGroup
  displayName: Image Resource Group
  type: string
  default: packer
- name: destroy
  displayName: Destroy Infrastructure
  type: boolean
  default: true
- name: retryCount
  displayName: Build task retry count
  type: number
  default: 1

jobs:
- job: '${{ parameters.image }}'
  displayName: 'Build & publish ${{ parameters.image }}'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  timeoutInMinutes: 360

  variables:
  - name: 'agentRepository'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents'
  - name: 'agentScriptDirectory'
    value: '$(Build.SourcesDirectory)/azure-pipeline-agents/scripts'
  - name: AZURE_CORE_ONLY_SHOW_ERRORS
    value: 'true'
  - name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
    value: 'yes_without_prompt'
  - name: 'galleryResourceGroup' 
    value: 'Shared'
  - name: 'imageConfigFile'
    value: '${{ lower(parameters.image) }}.json'
  - name: 'imageName'
    value: '${{ parameters.image }}'
  - name: 'imageDefinitionName'
    value: '${{ parameters.image }}'
  - ${{ if contains(parameters.image,'buntu') }}:
    - name: 'imageOffer'
      value: 'Ubuntu'
    - name: 'imageOSType'
      value: 'linux'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Ubuntu', '') }}
    - name: 'imageSubDirectory'
      value: 'linux'
  - ${{ else }}:
    - name: 'imageOffer'
      value: 'Windows'
    - name: 'imageOSType'
      value: 'windows'
    - name: 'imageSKU'
      value: ${{ replace(parameters.image,'Windows', '') }}
    - name: 'imageSubDirectory'
      value: 'win'
  - name: 'imagePublisher'
    value: 'PrivatePipelineImages'
  - name: 'imageRepository'
    value: '$(Build.SourcesDirectory)/virtual-environments'
  - name: 'imageReleaseName' 
    value: '${{ parameters.imageReleaseName }}'
  - name: 'imageResourceGroup' 
    value: '${{ parameters.imageResourceGroup }}'
  - name: 'imageScriptDirectory'
    value: '$(Build.SourcesDirectory)/virtual-environments/helpers'
  - name: 'retryCount' 
    value: ${{ parameters.retryCount }}

  steps:
  - checkout: self
  - checkout: virtual-environments

  - pwsh: |
      $vmMetadata = (Invoke-RestMethod -Headers @{"Metadata"="true"} -Method GET -NoProxy -Uri "http://169.254.169.254/metadata/instance/compute?api-version=2021-02-01" -TimeoutSec 1)
      $vmMetadata | Add-Member -NotePropertyName hostName -NotePropertyValue $([System.Net.Dns]::GetHostName())
      $vmMetadata | Format-List

      # List environment variables
      Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,GEEKZTER_*,TF_*,SYSTEM_* | Sort-Object -Property Name

      Write-Host "##vso[task.setvariable variable=location;isoutput=true]$($vmMetadata.location)"
    name: agent
    displayName: 'Retrieve agent information'

  - task: AzureCLI@2
    name: githubRelease
    displayName: 'Get release for ${{ parameters.imageReleaseName }}'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        (Invoke-RestMethod -Uri https://api.github.com/repos/actions/virtual-environments/releases) | Where-Object {$_.tag_name -match "$(imageReleaseName)" -and !$_.draft -and !$_.prerelease} `
                                                                                                    | Select-Object -First 1 `
                                                                                                    | Set-Variable release
        $release | Format-List
        $version = $release.tag_name.Split("/")[1]

        # Determine whether image with same config already exists
        az sig image-version list --gallery-image-definition $(imageDefinitionName) `
                                  --gallery-name $(imageGalleryName) `
                                  --resource-group $(galleryResourceGroup) `
                                  --query "[?tags.versionlabel=='$version' && provisioningState!='Failed']" | ConvertFrom-Json | Set-Variable imageVersion
        $newImageVersion = !$imageVersion
        Write-Host "##vso[task.setvariable variable=newImageVersion;isoutput=true]$newImageVersion"
        if ($newImageVersion) {
          Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$($release.target_commitish)"
          Write-Host "##vso[task.setvariable variable=tag;isoutput=true]$($release.tag_name)"
          Write-Host "##vso[task.setvariable variable=version;isoutput=true]$version"
        } else {
          Write-Warning "Image Definition '$(imageDefinitionName)' with label '$version' already exists"
          Write-Warning "Build & publish will be skipped"
        }
      addSpnToEnvironment: true
      useGlobalConfig: true
      failOnStandardError: true

  - task: AzureCLI@2
    name: servicePrincipal
    displayName: 'Fetch build credentials'
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json | Format-List

        Write-Host "##vso[task.setvariable variable=clientId;isoutput=true]${env:servicePrincipalId}"
        Write-Host "##vso[task.setvariable variable=clientSecret;isoutput=true;issecret=true]${env:servicePrincipalKey}"
        Write-Host "##vso[task.setvariable variable=tenantId;isoutput=true]${env:tenantId}"
      addSpnToEnvironment: true
      useGlobalConfig: true
      failOnStandardError: true

  - task: AzurePowerShell@5
    name: imageBuild
    displayName: 'Build image'
    condition: eq(coalesce(variables['githubRelease.newImageVersion'],'null'),'true')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: inlineScript
      inline: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }

        # Patch GenerateResourcesAndImage.ps1 to improve build time
        (Get-Content -Raw ./GenerateResourcesAndImage.ps1) -replace "Standard_LRS","Premium_LRS" | Set-Content ./GenerateResourcesAndImage.ps1

        # Override Packer settings with environment variables
        $env:AGENT_IP            = $env:GEEKZTER_AGENT_OUTBOUND_IP # Should not be needed if VNet is also specified
        $env:VNET_NAME           = $env:GEEKZTER_PACKER_VIRTUAL_NETWORK_NAME
        $env:VNET_RESOURCE_GROUP = $env:GEEKZTER_PACKER_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME
        $env:VNET_SUBNET         = $env:GEEKZTER_PACKER_SUBNET_NAME

        # Build
        Import-Module ./GenerateResourcesAndImage.ps1
        Get-AzContext | Select-Object -ExpandProperty Subscription | Select-Object -ExpandProperty Id | Set-Variable subscriptionId
        # GenerateResourcesAndImage -SubscriptionId $subscriptionId `
        #                           -ResourceGroupName $(imageResourceGroup) `
        #                           -ImageGenerationRepositoryRoot "$(imageRepository)" `
        #                           -ImageType $(imageName) `
        #                           -AzureLocation $(agent.location) `
        #                           -AzureClientId $(servicePrincipal.clientId) `
        #                           -AzureClientSecret "$(servicePrincipal.clientSecret)" `
        #                           -AzureTenantId $(servicePrincipal.tenantId) 

        Write-Host "##vso[task.setvariable variable=commit;isoutput=true]$(git rev-parse HEAD)"
        Write-Host "##vso[task.setvariable variable=shortCommit;isoutput=true]$(git rev-parse --short HEAD)"
      azurePowerShellVersion: 'latestVersion'
      pwsh: true
      failOnStandardError: true
      retryCountOnTaskFailure: $(retryCount)
      workingDirectory: '$(imageScriptDirectory)'

  - task: AzureCLI@2
    name: vhd
    displayName: 'Get VHD url'
    condition: eq(coalesce(variables['githubRelease.newImageVersion'],'null'),'true')
    inputs:
      azureSubscription: '$(packerSubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }

        $packerResourceGroupId = "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(imageResourceGroup)" 
        # ./get_vhd.ps1 -PackerResourceGroupId $packerResourceGroupId `
        #               -GenerateSAS `
        #               -VHDUrlEnvironmentVariableName IMAGE_VHD_URL
        ./get_vhd.ps1 -GenerateSAS -VHDUrlEnvironmentVariableName IMAGE_VHD_URL -PackerResourceGroupId /subscriptions/84c1a2c7-585a-4753-ad28-97f69618cf12/resourceGroups/packer-11990-u20
        # Write-Host "##vso[task.setvariable variable=url;isoutput=true;issecret=true]${env:IMAGE_VHD_URL}"
        Write-Host "##vso[task.setvariable variable=url;isoutput=true]${env:IMAGE_VHD_URL}"
      useGlobalConfig: true
      failOnStandardError: true
      workingDirectory: '$(agentScriptDirectory)'

  - task: AzureCLI@2
    name: publish
    displayName: 'Publish image'
    condition: eq(coalesce(variables['githubRelease.newImageVersion'],'null'),'true')
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # Diagnostics
        if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
          $DebugPreference       = "Continue"
          $InformationPreference = "Continue"
          $VerbosePreference     = "Continue"
          Set-PSDebug -Trace 2
        }
        $ProgressPreference = 'SilentlyContinue'

        # Publish
        $imageDefinitionVersionTags = @{
          build = "$(Build.BuildId)"
          commit = "$(imageBuild.commit)"
          pipeline = "$(Build.DefinitionName)"
          versionlabel = "$(githubRelease.version)"
        }
        $imageDefinitionVersionTags
        $galleryResourceGroupId = "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(galleryResourceGroup)" 
        # Write-Debug "./publish_vhd.ps1 -SourceVHDUrl `"$(vhd.url)`" `
        #                   -TargetVHDStorageAccountName $(imageStorageAccountName) `
        #                   -TargetVHDStorageContainerName $(imageStorageContainerName) `
        #                   -GalleryResourceGroupId $galleryResourceGroupId `
        #                   -GalleryName $(imageGalleryName) `
        #                   -ImageDefinitionName $(imageDefinitionName) `
        #                   -ImageDefinitionVersionTags $imageDefinitionVersionTags `
        #                   -Publisher $(imagePublisher) `
        #                   -Offer $(imageOffer) `
        #                   -SKU $(imageSKU) `
        #                   -OsType $(imageOSType) `
        #                   -TargetRegion $(targetRegions)"

        # ./publish_vhd.ps1 -SourceVHDUrl "$(vhd.url)" `
        #                   -TargetVHDStorageAccountName $(imageStorageAccountName) `
        #                   -TargetVHDStorageContainerName $(imageStorageContainerName) `
        #                   -GalleryResourceGroupId $galleryResourceGroupId `
        #                   -GalleryName $(imageGalleryName) `
        #                   -ImageDefinitionName $(imageDefinitionName) `
        #                   -ImageDefinitionVersionTags $imageDefinitionVersionTags `
        #                   -Publisher $(imagePublisher) `
        #                   -Offer $(imageOffer) `
        #                   -SKU $(imageSKU) `
        #                   -OsType $(imageOSType) `
        #                   -TargetRegion $(targetRegions)

        # ./get_vhd.ps1 -GenerateSAS -VHDUrlEnvironmentVariableName IMAGE_VHD_URL -PackerResourceGroupId /subscriptions/84c1a2c7-585a-4753-ad28-97f69618cf12/resourceGroups/packer-11990-u20
        
        # ./publish_vhd.ps1 -SourceVHDUrl "${env:IMAGE_VHD_URL}" `
        #           -TargetVHDStorageAccountName geekztervhds `
        #           -TargetVHDStorageContainerName vhd `
        #           -GalleryResourceGroupId /subscriptions/84c1a2c7-585a-4753-ad28-97f69618cf12/resourceGroups/Shared `
        #           -GalleryName SharedImages `
        #           -ImageDefinitionName Ubuntu2004 `
        #           -ImageDefinitionVersionTags $imageDefinitionVersionTags `
        #           -Publisher PrivatePipelineImages `
        #           -Offer Ubuntu `
        #           -SKU 2004 `
        #           -OsType linux `
        #           -TargetRegion westeurope,northeurope,centralus
        ./publish_vhd.ps1 -SourceVHDUrl "https://packer11990u20001.blob.core.windows.net/system/Microsoft.Compute/Images/images/packer-osDisk.f11df47e-644a-4332-9c47-8aa5bd147b18.vhd?se=2022-02-14&sp=r&sv=2018-11-09&sr=b&skoid=115c3ab3-943b-4e0c-96ed-1a1763fbaa44&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2022-02-07T13%3A26%3A05Z&ske=2022-02-14T00%3A00%3A00Z&sks=b&skv=2018-11-09&sig=bZ93Eg0vyxhbPQe3alZ7xexyQWBMQuaeB%2BOyc44ziSA%3D" `
                  -TargetVHDStorageAccountName geekztervhds `
                  -TargetVHDStorageContainerName vhd `
                  -GalleryResourceGroupId /subscriptions/84c1a2c7-585a-4753-ad28-97f69618cf12/resourceGroups/Shared `
                  -GalleryName SharedImages `
                  -ImageDefinitionName Ubuntu2004 `
                  -ImageDefinitionVersionTags $imageDefinitionVersionTags `
                  -Publisher PrivatePipelineImages `
                  -Offer Ubuntu `
                  -SKU 2004 `
                  -OsType linux `
                  -TargetRegion westeurope,northeurope,centralus
      useGlobalConfig: true
      failOnStandardError: true
      workingDirectory: '$(agentScriptDirectory)'
    # env:
    #   IMAGE_VHD_URL: variables['vhd.url']

  - task: AzureCLI@2
    displayName: 'List published images'
    inputs:
      azureSubscription: '$(gallerySubscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        ./list_image_versions.ps1 -GalleryResourceGroupName $(galleryResourceGroup) `
                                  -GalleryName $(imageGalleryName) `
                                  -ImageDefinitionName $(imageDefinitionName)
      useGlobalConfig: true
      failOnStandardError: true
      workingDirectory: '$(agentScriptDirectory)'

  - ${{ if parameters.destroy }}:
    - task: AzureCLI@2
      name: teardown
      displayName: 'Tear down temporary resources'
      condition: always() # succeededOrFailed()
      inputs:
        azureSubscription: '$(packerSubscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "[?name=='$(imageResourceGroup)'].id" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(agentScriptDirectory)'