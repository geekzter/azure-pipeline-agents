# This pipeline is for CI/CD
name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-$(Build.BuildId)

resources:
  repositories:
  - repository: virtual-environments
    type: github
    endpoint: github.com # Service Connection
    name: actions/virtual-environments

trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

# schedules:
# - cron: '0 0 * * Mon,Wed,Fri'
#   displayName: 'Bi-Nightly build (UTC)'
#   # Run if there are no changes
#   always: 'true'
#   branches:
#     include:
#     - master

variables:
- group: 'pipeline-agents-ci'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'repository'
  value: 'azure-pipeline-agents'
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: 'true'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'agentRepository'
  value: '$(Build.SourcesDirectory)/azure-pipeline-agents'
- name: 'agentScriptDirectory'
  value: '$(Build.SourcesDirectory)/azure-pipeline-agents/scripts'
- name: 'imageRepository'
  value: '$(Build.SourcesDirectory)/virtual-environments'
- name: 'imageScriptDirectory'
  value: '$(Build.SourcesDirectory)/virtual-environments/helpers'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'

- name: 'imageResourceGroup' 
  value: 'azure-pipelines-images-$(Build.BuildId)'

jobs:
- job: 'Build'

  pool:
    name: 'Azure Pipelines'
    vmImage: windows-latest

  steps:
  - checkout: self
  - checkout: virtual-environments

  - pwsh: |
      dir
    displayName: 'Agent directory'
    workingDirectory: '$(agentScriptDirectory)'
  - pwsh: |
      dir
    displayName: 'Image directory'
    workingDirectory: '$(imageScriptDirectory)'

  # - task: AzureCLI@2
  #   name: build
  #   displayName: 'Build image'
  #   inputs:
  #     azureSubscription: $(subscriptionConnection)
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       Import-Module ./GenerateResourcesAndImage.ps1
  #       GenerateResourcesAndImage -SubscriptionId $(az account show --query id -o tsv) `
  #                                 -ResourceGroupName $(imageResourceGroup) `
  #                                 -ImageGenerationRepositoryRoot $(imageRepository) `
  #                                 -ImageType Ubuntu1804 `
  #                                 -AzureLocation $(TF_VAR_location) `
  #                                 -AzureClientId $env:servicePrincipalId `
  #                                 -AzureClientSecret "${env:servicePrincipalKey}" `
  #                                 -AzureTenantId $env:tenantId
  #     addSpnToEnvironment: true
  #     useGlobalConfig: true
  #     failOnStandardError: true
  #     workingDirectory: '$(imageScriptDirectory)'

  # - task: AzurePowerShell@5
  #   displayName: Run Pester Tests
  #   name: run_pester_tests
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     ScriptType: 'InlineScript'
  #     Inline: |
  #       Invoke-Pester -EnableExit -Script @{Path="$(System.DefaultWorkingDirectory)/pester/Parameter.Tests.ps1"; Parameters=@{ ParameterPath="$(System.DefaultWorkingDirectory)/parameters/azuredeploy.parameters.dev.json" }}  -OutputFile $(Build.ArtifactStagingDirectory)/Test-Pester-Readme.xml
  #     azurePowerShellVersion: 'LatestVersion'

  - task: AzurePowerShell@5
    name: build
    displayName: 'Build image'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: inlineScript
      inline: |
        dir
      azurePowerShellVersion: 'latestVersion'
      # pwsh: true
      # failOnStandardError: true
      # workingDirectory: '$(imageScriptDirectory)'

        # Import-Module ./GenerateResourcesAndImage.ps1
        # echo GenerateResourcesAndImage -SubscriptionId $(az account show --query id -o tsv) `
        #                           -ResourceGroupName $(imageResourceGroup) `
        #                           -ImageGenerationRepositoryRoot "$(imageRepository)" `
        #                           -ImageType Ubuntu1804 `
        #                           -AzureLocation $(TF_VAR_location)